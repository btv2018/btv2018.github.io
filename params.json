{"name":"dev/tips","tagline":"Development tips&hints","body":"## Git\r\n### Алиасы\r\nДабы не писать в консоли `git status` полностью, а пользоваться сокращениями типа `git st`. В файле `~/.gitconfig` добавляем\r\n```ini\r\n[alias]\r\n\tci = commit\r\n\tst = status\r\n\tco = checkout\r\n\tdf = diff\r\n\tbr = branch\r\n\tsh = stash\r\n```\r\n### Раскрашиваем вывод в терминале\r\nПравим `~/.gitconfig`\r\n```ini\r\n[color]\r\n\tui = true\r\n```\r\n### Имя ветки в bash prompt\r\nВ `.bashrc` добавляем следующий код.\r\n```bash\r\nfunction parse_git_dirty {\r\n  [[ $(git status 2> /dev/null | tail -n1) != \"nothing to commit, working directory clean\" ]] && echo \"*\"\r\n}\r\nfunction parse_git_branch {\r\n  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e \"s/* \\(.*\\)/[\\1$(parse_git_dirty)]/\"\r\n}\r\nexport PS1='\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\    w\\[\\033[00m\\]\\[\\033[01;35m\\]$(parse_git_branch)\\[\\033[00m\\]\\$ '\r\n```\r\nТеперь, если вы находитесь в папке, которая есть репозиторий git, то в `bash prompt` у вас будет отображаться название текущей ветки и звёздочка, если в репозитории есть незакоммиченные изменения.\r\n\r\n## bash alias\r\nВ `.bashrc` прописываем полезные алиасы для коммандной строки, типа\r\n```bash\r\nalias ps?=\"ps aux | grep\"\r\n```\r\n\r\n## ssh\r\nЕсли надо логиниться на машину с длинным и утомительным названием и, в добавок, под другим пользователем. То можно прописать в `~/.ssh/config` что-то в духе\r\n```bash\r\nHost backend\r\n    Hostname dev-wiki-backend\r\n    user wiki\r\n\r\nHost frontend\r\n    Hostname dev-wiki-frontend\r\n    user wiki\r\n```\r\nИ тогда в коммандной строке писать `ssh bac<TAB>` (да, будет работать автокомплит!)\r\n\r\nПодробности: #29: A note about ssh alias http://www.cyberciti.biz/tips/bash-aliases-mac-centos-linux-unix.html\r\n\r\nПро логин без пароля по ключикам не рассказываю http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id/\r\n\r\n## terminator\r\n**Terminator** – эмулятор терминала, который умеет разбивать окно на несколько окон.\r\n\r\nhttp://en.wikipedia.org/wiki/Terminator_(terminal_emulator)\r\n\r\n## make\r\n`make` принимает опцию `-j` сколько джоб использовать для сборки проекта. Может существенно ускорить работу.\r\n\r\nРазумное значение – количество ядер помножить на два (аргументации особой нет).\r\n\r\n## ccache\r\nПолезная утилита, кеширующая результат компиляции. Существенно ускоряет процесс сборки/пересборки проекта.\r\nhttp://ru.wikipedia.org/wiki/Ccache\r\n\r\n## jenkins-cli\r\nCommand Line Interface для **Jenkins** continuous integration tool. https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI\r\n\r\nПозволяет запускать таски из терминала, ждать их окончания и прочие ништячки.\r\n\r\n## cplusplus.com\r\nhttp://www.cplusplus.com/ замечательный сайт с хорошими справочными материалами по `STL`.\r\nИ с хинтом, если набрать http://www.cplusplus.com/vector , то вы будете перенаправлены на страницу с документацией. В браузере можно сделать кастомный поиск, указав в настройках `http://cplusplus.com/%s`, тогда набрав в адресной строке `c copy_if` будете перенаправлены на страницу с документацией об алгоритме `std::copy_if`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}